document.addEventListener("DOMContentLoaded",()=>{
    const e=document.getElementById("loading-screen"),
          t=document.querySelectorAll(".testimonial-card"),
          n=document.querySelectorAll(".testimonial-dot"),
          a=document.querySelector(".testimonial-arrow.prev"),
          i=document.querySelector(".testimonial-arrow.next");
    
    // Testimonial carousel functionality
    let s=1, o; // Start with index 1 (Raymond's testimonial) as it's marked active in HTML
    const c=()=>{
        // First, remove active class from all testimonials and reset their states
        t.forEach(e=>{
            e.classList.remove("active");
            e.style.display = '';
            e.style.opacity = '';
            e.style.zIndex = '0';
        });
        
        // Then add active class to current testimonial and set its styles
        t[s].classList.add("active");
        t[s].style.display = 'block';
        t[s].style.opacity = '1';
        t[s].style.zIndex = '5';
        
        // Update navigation dots
        n.forEach((e,t)=>{
            e.classList.toggle("active", t===s);
        });
    },
    r=()=>{s=(s+1)%t.length; c();},
    l=()=>{s=(s-1+t.length)%t.length; c();},
    d=()=>{o&&clearInterval(o); o=setInterval(r,5e3);};
    
    // Event listeners for testimonial dots
    n.forEach((e,t)=>{
        e.addEventListener("click",()=>{
            s=t;
            c();
            d();
        });
        e.addEventListener("keydown",n=>{
            " "!==n.key&&"Enter"!==n.key||(n.preventDefault(),s=t,c(),d());
        });
    });
    
    // Event listeners for prev/next arrows
    a&&a.addEventListener("click",()=>{l(),d()});
    a&&a.addEventListener("keydown",e=>{" "!==e.key&&"Enter"!==e.key||(e.preventDefault(),l(),d())});
    i&&i.addEventListener("click",()=>{r(),d()});
    i&&i.addEventListener("keydown",e=>{" "!==e.key&&"Enter"!==e.key||(e.preventDefault(),r(),d())});
    
    // Initialize carousel
    c();
    d();
    
    // FAQ functionality
    const u=document.querySelectorAll(".faq-item");
    u.forEach(e=>{
        const t=e.querySelector(".faq-question"),
              n=e.querySelector(".faq-answer");
        if(t&&n){
            t.setAttribute("aria-expanded","false"),
            n.setAttribute("aria-hidden","true"),
            t.addEventListener("click",()=>{
                const a=e.classList.contains("active");
                u.forEach(a=>{
                    if(a!==e&&a.querySelector(".faq-question")&&a.querySelector(".faq-answer")){
                        a.classList.remove("active");
                        const e=a.querySelector(".faq-question"),
                              t=a.querySelector(".faq-answer");
                        e&&e.setAttribute("aria-expanded","false"),
                        t&&t.setAttribute("aria-hidden","true")
                    }
                }),
                e.classList.toggle("active");
                const i=e.classList.contains("active");
                t.setAttribute("aria-expanded",i?"true":"false"),
                n.setAttribute("aria-hidden",i?"false":"true")
            }),
            t.addEventListener("keydown",a=>{
                " "!==a.key&&"Enter"!==a.key||(
                    a.preventDefault(),
                    e.classList.toggle("active"),
                    t.setAttribute("aria-expanded",e.classList.contains("active")?"true":"false"),
                    n.setAttribute("aria-hidden",e.classList.contains("active")?"false":"true")
                )
            })
        }
    });
    
    // Waitlist highlighting effect
    const f=document.getElementById("waitlist-main");
    if(f){
        let e=0,t=3;
        const n=setInterval(()=>{
            f.classList.toggle("highlight"),
            e++,
            e>=2*t&&(clearInterval(n),f.classList.remove("highlight"))
        },800)
    }
    
    const m=document.getElementById("waitlist-footer");
    if(m){
        const e=new IntersectionObserver(t=>{
            t.forEach(t=>{
                if(t.isIntersecting){
                    let n=0,a=2;
                    const i=setInterval(()=>{
                        m.classList.toggle("highlight"),
                        n++,
                        n>=2*a&&(clearInterval(i),m.classList.remove("highlight"),e.unobserve(m))
                    },800)
                }
            })
        },{threshold:.5});
        e.observe(m)
    }
    
    // Modal functionality
    const modal = document.getElementById('story-modal'),
          modalLink = document.getElementById('read-story-link'),
          closeBtn = document.querySelector('.close-modal');
    
    if(modalLink && modal && closeBtn) {
        // Open modal when link is clicked
        modalLink.addEventListener('click', function(e) {
            e.preventDefault();
            modal.classList.add('show');
            document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open
        });
        
        // Close modal when X is clicked
        closeBtn.addEventListener('click', function() {
            modal.classList.remove('show');
            document.body.style.overflow = ''; // Re-enable scrolling
            
            // Fully hide the modal after transition completes
            setTimeout(() => {
                if(!modal.classList.contains('show')) {
                    modal.style.display = 'none';
                }
            }, 300);
        });
        
        // Close modal when clicking outside the modal content
        window.addEventListener('click', function(e) {
            if(e.target === modal) {
                modal.classList.remove('show');
                document.body.style.overflow = ''; // Re-enable scrolling
                
                // Fully hide the modal after transition completes
                setTimeout(() => {
                    if(!modal.classList.contains('show')) {
                        modal.style.display = 'none';
                    }
                }, 300);
            }
        });
    }
    
    // Fix testimonial heights function
    function setTestimonialHeights() {
        const testimonialGrid = document.querySelector('.testimonials-grid'),
              testimonials = document.querySelectorAll('.testimonial-card');
        
        if(!testimonialGrid || !testimonials.length) return;
        
        // Reset any previously set heights
        testimonialGrid.style.minHeight = '';
        
        // Make all testimonials visible but transparent for measuring
        testimonials.forEach(card => {
            if (!card.classList.contains('active')) {
                card.style.display = 'block';
                card.style.opacity = '0';
                card.style.position = 'absolute';
                card.style.zIndex = '0';
            }
            card.style.height = 'auto'; // Let it size to content
        });
        
        // Find the tallest testimonial
        let maxHeight = 0;
        testimonials.forEach(card => {
            const height = card.offsetHeight;
            if(height > maxHeight) {
                maxHeight = height;
            }
        });
        
        // Add some padding for safety
        maxHeight += 30;
        
        // Check against minimum heights for different screen sizes
        let minHeight = 250; // Default minimum
        
        if(window.innerWidth <= 480) {
            minHeight = 380; // Small mobile minimum
        } else if(window.innerWidth <= 768) {
            minHeight = 300; // Mobile/tablet minimum
        }
        
        // Use the larger of calculated height or minimum height
        const finalHeight = Math.max(maxHeight, minHeight);
        
        // Set the grid container height
        testimonialGrid.style.minHeight = `${finalHeight}px`;
        
        // Reset cards to their proper state
        testimonials.forEach(card => {
            if(!card.classList.contains('active')) {
                card.style.display = '';
                card.style.opacity = '';
            }
        });
    }
    
    // Run the testimonial height function on load
    setTestimonialHeights();
    
    // Also run whenever window is resized
    window.addEventListener('resize', setTestimonialHeights);
    
    // Scroll to waitlist function
    window.scrollToWaitlist = function() {
        const waitlistElement = document.getElementById('waitlist-main');
        if(waitlistElement) {
            waitlistElement.scrollIntoView({ behavior: 'smooth' });
            
            // Add a subtle highlight effect
            waitlistElement.classList.add('highlight-waitlist');
            setTimeout(() => {
                waitlistElement.classList.remove('highlight-waitlist');
            }, 1500);
        }
    };
    
    // Sticky banner show/hide on scroll
    const topBanner = document.querySelector('.top-banner');
    const makerSection = document.querySelector('.maker-section');
    const pageWrapper = document.querySelector('.page-wrapper');
    const body = document.body;
    
    if(topBanner && makerSection && pageWrapper) {
        // Initial state - ensure banner is hidden and no extra space
        topBanner.classList.remove('visible');
        body.style.paddingTop = '0';
        
        // Scroll event for showing/hiding the banner
        window.addEventListener('scroll', () => {
            const makerSectionBottom = makerSection.getBoundingClientRect().bottom;
            
            // Show banner when scrolled past maker section, hide when above it
            if(makerSectionBottom <= 0) {
                topBanner.classList.add('visible');
                // Only on desktop add padding to body
                if(window.innerWidth >= 769) {
                    body.style.paddingTop = topBanner.offsetHeight + 'px';
                }
            } else {
                topBanner.classList.remove('visible');
                body.style.paddingTop = '0';
            }
        });
    }
    
    // Show page after loading
    setTimeout(()=>{
        document.body.classList.add("loaded");
        e && e.classList.add("hidden");
    },100);
    
    // Countdown timer functionality with cookie persistence
    const countdownTimer = document.getElementById('countdown-timer');
    if (countdownTimer) {
        // Function to set a cookie with expiration
        function setCookie(name, value, days) {
            const date = new Date();
            date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
            const expires = "expires=" + date.toUTCString();
            document.cookie = name + "=" + value + ";" + expires + ";path=/";
        }
        
        // Function to get a cookie value
        function getCookie(name) {
            const cname = name + "=";
            const decodedCookie = decodeURIComponent(document.cookie);
            const ca = decodedCookie.split(';');
            for(let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(cname) === 0) {
                    return c.substring(cname.length, c.length);
                }
            }
            return "";
        }
        
        // Get the end date from cookie or set a new one (7 days from now)
        let endDate = getCookie("countdown_end_date");
        if (!endDate) {
            const now = new Date();
            endDate = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000).getTime(); // 7 days from now
            setCookie("countdown_end_date", endDate, 30); // Store for 30 days
        } else {
            endDate = parseInt(endDate);
        }
        
        // Function to update the countdown timer
        function updateCountdown() {
            const now = new Date().getTime();
            const distance = endDate - now;
            
            // Calculate days, hours, minutes, seconds
            const days = Math.floor(distance / (1000 * 60 * 60 * 24));
            const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((distance % (1000 * 60)) / 1000);
            
            // Format the output
            if (distance < 0) {
                // Countdown is over
                countdownTimer.innerHTML = "Offer expired";
            } else if (days > 0) {
                // More than a day remaining
                countdownTimer.innerHTML = `Ends in ${days} day${days !== 1 ? 's' : ''}, ${hours}h ${minutes}m`;
            } else {
                // Less than a day remaining
                countdownTimer.innerHTML = `Ends in ${hours}h ${minutes}m ${seconds}s`;
            }
        }
        
        // Update the countdown immediately
        updateCountdown();
        
        // Update the countdown every second
        setInterval(updateCountdown, 1000);
    }
}); 