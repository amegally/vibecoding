document.addEventListener("DOMContentLoaded",()=>{
    const e=document.getElementById("loading-screen"),
          t=document.querySelectorAll(".testimonial-card"),
          n=document.querySelectorAll(".testimonial-dot"),
          a=document.querySelector(".testimonial-arrow.prev"),
          i=document.querySelector(".testimonial-arrow.next");
    
    // Testimonial carousel functionality
    let s=0,o;
    const c=()=>{
        t.forEach(e=>{e.classList.remove("active")}),
        t[s].classList.add("active"),
        n.forEach((e,t)=>{e.classList.toggle("active",t===s)})
    },
    r=()=>{s=(s+1)%t.length,c()},
    l=()=>{s=(s-1+t.length)%t.length,c()},
    d=()=>{o&&clearInterval(o),o=setInterval(r,5e3)};
    
    n.forEach((e,t)=>{
        e.addEventListener("click",()=>{s=t,c(),d()}),
        e.addEventListener("keydown",n=>{" "!==n.key&&"Enter"!==n.key||(n.preventDefault(),s=t,c(),d())})
    });
    
    a&&a.addEventListener("click",()=>{l(),d()});
    a&&a.addEventListener("keydown",e=>{" "!==e.key&&"Enter"!==e.key||(e.preventDefault(),l(),d())});
    i&&i.addEventListener("click",()=>{r(),d()});
    i&&i.addEventListener("keydown",e=>{" "!==e.key&&"Enter"!==e.key||(e.preventDefault(),r(),d())});
    
    c(),d();
    
    // FAQ functionality
    const u=document.querySelectorAll(".faq-item");
    u.forEach(e=>{
        const t=e.querySelector(".faq-question"),
              n=e.querySelector(".faq-answer");
        if(t&&n){
            t.setAttribute("aria-expanded","false"),
            n.setAttribute("aria-hidden","true"),
            t.addEventListener("click",()=>{
                const a=e.classList.contains("active");
                u.forEach(a=>{
                    if(a!==e&&a.querySelector(".faq-question")&&a.querySelector(".faq-answer")){
                        a.classList.remove("active");
                        const e=a.querySelector(".faq-question"),
                              t=a.querySelector(".faq-answer");
                        e&&e.setAttribute("aria-expanded","false"),
                        t&&t.setAttribute("aria-hidden","true")
                    }
                }),
                e.classList.toggle("active");
                const i=e.classList.contains("active");
                t.setAttribute("aria-expanded",i?"true":"false"),
                n.setAttribute("aria-hidden",i?"false":"true")
            }),
            t.addEventListener("keydown",a=>{
                " "!==a.key&&"Enter"!==a.key||(
                    a.preventDefault(),
                    e.classList.toggle("active"),
                    t.setAttribute("aria-expanded",e.classList.contains("active")?"true":"false"),
                    n.setAttribute("aria-hidden",e.classList.contains("active")?"false":"true")
                )
            })
        }
    });
    
    // Waitlist highlighting effect
    const f=document.getElementById("waitlist-main");
    if(f){
        let e=0,t=3;
        const n=setInterval(()=>{
            f.classList.toggle("highlight"),
            e++,
            e>=2*t&&(clearInterval(n),f.classList.remove("highlight"))
        },800)
    }
    
    const m=document.getElementById("waitlist-footer");
    if(m){
        const e=new IntersectionObserver(t=>{
            t.forEach(t=>{
                if(t.isIntersecting){
                    let n=0,a=2;
                    const i=setInterval(()=>{
                        m.classList.toggle("highlight"),
                        n++,
                        n>=2*a&&(clearInterval(i),m.classList.remove("highlight"),e.unobserve(m))
                    },800)
                }
            })
        },{threshold:.5});
        e.observe(m)
    }
    
    // Modal functionality
    const modal = document.getElementById('story-modal'),
          modalLink = document.getElementById('read-story-link'),
          closeBtn = document.querySelector('.close-modal');
    
    if(modalLink && modal && closeBtn) {
        // Open modal when link is clicked
        modalLink.addEventListener('click', function(e) {
            e.preventDefault();
            modal.classList.add('show');
            document.body.style.overflow = 'hidden'; // Prevent scrolling when modal is open
        });
        
        // Close modal when X is clicked
        closeBtn.addEventListener('click', function() {
            modal.classList.remove('show');
            document.body.style.overflow = ''; // Re-enable scrolling
            
            // Fully hide the modal after transition completes
            setTimeout(() => {
                if(!modal.classList.contains('show')) {
                    modal.style.display = 'none';
                }
            }, 300);
        });
        
        // Close modal when clicking outside the modal content
        window.addEventListener('click', function(e) {
            if(e.target === modal) {
                modal.classList.remove('show');
                document.body.style.overflow = ''; // Re-enable scrolling
                
                // Fully hide the modal after transition completes
                setTimeout(() => {
                    if(!modal.classList.contains('show')) {
                        modal.style.display = 'none';
                    }
                }, 300);
            }
        });
    }
    
    // Fix testimonial heights function
    function setTestimonialHeights() {
        const testimonialGrid = document.querySelector('.testimonials-grid'),
              testimonials = document.querySelectorAll('.testimonial-card');
        
        if(!testimonialGrid || !testimonials.length) return;
        
        // Reset any previously set heights
        testimonialGrid.style.minHeight = '';
        
        // Make all testimonials visible but transparent for measuring
        testimonials.forEach(card => {
            card.style.display = 'block';
            card.style.opacity = '0';
            card.style.position = 'absolute';
            card.style.zIndex = '0';
            card.style.height = 'auto'; // Let it size to content
        });
        
        // Find the tallest testimonial
        let maxHeight = 0;
        testimonials.forEach(card => {
            const height = card.offsetHeight;
            if(height > maxHeight) {
                maxHeight = height;
            }
        });
        
        // Add some padding for safety
        maxHeight += 30;
        
        // Check against minimum heights for different screen sizes
        let minHeight = 250; // Default minimum
        
        if(window.innerWidth <= 480) {
            minHeight = 380; // Small mobile minimum
        } else if(window.innerWidth <= 768) {
            minHeight = 300; // Mobile/tablet minimum
        }
        
        // Use the larger of calculated height or minimum height
        const finalHeight = Math.max(maxHeight, minHeight);
        
        // Set the grid container height
        testimonialGrid.style.minHeight = `${finalHeight}px`;
        
        // Reset cards to their proper state
        testimonials.forEach(card => {
            if(!card.classList.contains('active')) {
                card.style.display = '';
                card.style.opacity = '';
            }
        });
        
        // Make sure only the active one is visible
        const activeCard = document.querySelector('.testimonial-card.active');
        if(activeCard) {
            activeCard.style.display = 'block';
            activeCard.style.opacity = '1';
            activeCard.style.zIndex = '5';
        }
        
        // Fix for any extraneous images that might be appearing
        const extraImages = document.querySelectorAll('.testimonials-section > img:not([class]), .testimonials-grid + img:not([class]), .testimonial-navigation + img:not([class])');
        extraImages.forEach(img => {
            img.style.display = 'none';
        });
    }
    
    // Run the testimonial height function on load
    setTestimonialHeights();
    
    // Also run whenever window is resized
    window.addEventListener('resize', setTestimonialHeights);
    
    // Scroll to waitlist function
    window.scrollToWaitlist = function() {
        const waitlistElement = document.getElementById('waitlist-main');
        if(waitlistElement) {
            waitlistElement.scrollIntoView({ behavior: 'smooth' });
            
            // Add a subtle highlight effect
            waitlistElement.classList.add('highlight-waitlist');
            setTimeout(() => {
                waitlistElement.classList.remove('highlight-waitlist');
            }, 1500);
        }
    };
    
    // Show page after loading
    setTimeout(()=>{
        document.body.classList.add("loaded");
        e && e.classList.add("hidden");
    },100);
}); 